import numpy as np

# Parametere
L = 10              # Lengden på romdomenet
T = 2               # Total tid
m = 100             # Antall romlige punkter
n = 1000            # Antall tidssteg
x = np.linspace(0, L, m)
t = np.linspace(0, T, n)
h = L / (m - 1)     # Romlig steglengde
k = T / (n - 1)     # Tidssteglengde
v = 0.1             # Viskositet

# Initialiserer løsningsmatrisen
u = np.zeros((n, m))

# Initialbetingelser (for eksempel u(t=0, x) = sin(pi*x/L))
u[0, :] = np.sin(np.pi * x / L)

# Randbetingelser (for eksempel u(t, x=0) = u(t, x=L) = 0)
u[:, 0] = 0
u[:, -1] = 0

# Tidsintegrasjon med Eulers metode og sentral differanse
for i in range(1, n):
    for j in range(1, m - 1):
        u_t = (u[i-1, j] - u[i-2, j]) / k if i > 1 else (u[i, j] - u[i-1, j]) / k
        u_x = (u[i-1, j+1] - u[i-1, j-1]) / (2*h) 
        u_xx = (u[i-1, j+1] - 2*u[i-1, j] + u[i-1, j-1]) / h**2
        u[i, j] = u[i-1, j] - k * (u[i-1, j] * u_x - v * u_xx)

# Initialiserer en matrise for å lagre residualen
residuals = np.zeros((n, m))

# Tidsintegrasjon og residualberegning
for i in range(1, n):
    for j in range(1, m - 1):
        u_t = (u[i, j] - u[i-1, j]) / k
        u_x = (u[i-1, j+1] - u[i-1, j-1]) / (2*h) 
        u_xx = (u[i-1, j+1] - 2*u[i-1, j] + u[i-1, j-1]) / h**2
        residuals[i, j] = u_t + u[i-1, j] * u_x - v * u_xx

# Etter tidsintegrasjonen kan du analysere residualene
# For eksempel ved å printe maksimal absolutt verdi av residualen
max_residual = np.max(np.abs(residuals))
print(f'Maximal absolutt residual: {max_residual}')
